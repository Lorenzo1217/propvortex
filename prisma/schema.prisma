generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  company   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects Project[]
  
  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  
  // Keep old field for backward compatibility
  address     String
  
  // New address fields
  street      String?
  city        String?
  state       String?
  zipCode     String?
  
  description String?
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports     Report[]
  clients     ProjectClient[]
  photos      Photo[]

  @@map("projects")
}

model ProjectClient {
  id        String   @id @default(cuid())
  email     String
  firstName String
  lastName  String
  phone     String?
  invitedAt DateTime @default(now())
  lastViewedAt DateTime?

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, email])
  @@map("project_clients")
}

model Report {
  id               String   @id @default(cuid())
  weekNumber       Int
  year             Int
  title            String
  executiveSummary String?
  workCompleted    String?
  upcomingWork     String?
  issues           String?
  budget           String?
  clientActions    String?
  isPublished      Boolean  @default(false)
  publishedAt      DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

// ADD THESE TWO NEW FIELDS
  weatherData      Json?    // Stores 7-day forecast
  weatherFetchedAt DateTime? // When weather was last updated

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  photos    Photo[]

  @@unique([projectId, weekNumber, year])
  @@map("reports")
}

model Photo {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  caption     String?
  tags        String? // Comma-separated tags for room types, etc.
  uploadedAt  DateTime @default(now())

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reportId  String?
  report    Report? @relation(fields: [reportId], references: [id], onDelete: SetNull)

  @@map("photos")
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}