generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(cuid())
  clerkId              String    @unique
  email                String    @unique
  firstName            String?
  lastName             String?
  company              String?
  phone                String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  currentPeriodEnd     DateTime?
  projectLimit         Int?      @default(10)
  stripeCustomerId     String?   @unique
  stripePriceId        String?
  stripeSubscriptionId String?   @unique
  subscriptionStatus   String?
  projects             Project[]

  @@map("users")
}

model Project {
  id          String          @id @default(cuid())
  name        String
  address     String
  street      String?
  city        String?
  state       String?
  zipCode     String?
  description String?
  status      ProjectStatus   @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userId      String
  photos      Photo[]
  clients     ProjectClient[]
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports     Report[]

  @@map("projects")
}

model ProjectClient {
  id           String    @id @default(cuid())
  email        String
  firstName    String
  lastName     String
  phone        String?
  invitedAt    DateTime  @default(now())
  lastViewedAt DateTime?
  projectId    String
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, email])
  @@map("project_clients")
}

model Report {
  id                   String    @id @default(cuid())
  weekNumber           Int
  year                 Int
  title                String
  executiveSummary     String?
  workCompleted        Json?
  upcomingWork         Json?
  issues               Json?
  budget               Json?
  clientActions        Json?
  isPublished          Boolean   @default(false)
  publishedAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  weatherData          Json?
  weatherFetchedAt     DateTime?
  projectId            String
  ceConstructionCosts  String?
  ceContingency        String?
  ceContingencyUsed    String?
  ceFFE                String?
  ceInsuranceFinancing String?
  ceOffsiteUtilities   String?
  ceProfessionalFees   String?
  ceTotal              String?
  photos               Photo[]
  project              Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, weekNumber, year])
  @@map("reports")
}

model Photo {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  caption      String?
  tags         String?
  uploadedAt   DateTime @default(now())
  projectId    String
  reportId     String?
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  report       Report?  @relation(fields: [reportId], references: [id])

  @@map("photos")
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}
