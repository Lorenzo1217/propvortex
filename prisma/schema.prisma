generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(cuid())
  clerkId              String    @unique
  email                String    @unique
  firstName            String?
  lastName             String?
  company              String?
  phone                String?
  companyId            String?
  companyRelation      Company?  @relation(fields: [companyId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  currentPeriodEnd     DateTime?
  projectLimit         Int?      @default(10)
  stripeCustomerId     String?   @unique
  stripePriceId        String?
  stripeSubscriptionId String?   @unique
  subscriptionStatus   String?
  projects             Project[]

  @@map("users")
}

model Company {
  id             String   @id @default(cuid())
  name           String
  logoUrl        String?  // Cloudinary URL for company logo
  primaryColor   String   @default("#000000")    // Hex color
  secondaryColor String   @default("#666666")    // Hex color
  accentColor    String   @default("#3B82F6")    // Hex color (blue-500)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  users          User[]   // Company can have multiple users/builders
}

model Project {
  id          String          @id @default(cuid())
  name        String
  address     String
  street      String?
  city        String?
  state       String?
  zipCode     String?
  description String?
  status      ProjectStatus   @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userId      String
  photos      Photo[]
  clients     ProjectClient[]
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports     Report[]
  documents   Document[]

  @@map("projects")
}

enum ClientRelationship {
  HOMEOWNER
  ARCHITECT
  INVESTOR
  SUBCONTRACTOR
  OTHER
}

model ProjectClient {
  id               String             @id @default(cuid())
  email            String
  firstName        String
  lastName         String
  phone            String?
  passwordHash     String?
  isInvited        Boolean            @default(false)
  invitedAt        DateTime           @default(now())
  firstLoginAt     DateTime?
  lastLoginAt      DateTime?
  lastViewedAt     DateTime?
  relationshipType ClientRelationship @default(HOMEOWNER)
  projectId        String
  project          Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sessions         ClientSession[]

  @@unique([projectId, email])
  @@index([email])
  @@map("project_clients")
}

model ClientSession {
  id        String        @id @default(cuid())
  clientId  String
  client    ProjectClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  token     String        @unique
  expiresAt DateTime
  createdAt DateTime      @default(now())
  
  @@index([token])
  @@index([clientId])
}

model Report {
  id                   String    @id @default(cuid())
  weekNumber           Int
  year                 Int
  title                String
  executiveSummary     String?
  workCompleted        Json?
  upcomingWork         Json?
  issues               Json?
  budget               Json?
  clientActions        Json?
  isPublished          Boolean   @default(false)
  publishedAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  weatherData          Json?
  weatherFetchedAt     DateTime?
  projectId            String
  ceConstructionCosts  String?
  ceContingency        String?
  ceContingencyUsed    String?
  ceFFE                String?
  ceInsuranceFinancing String?
  ceOffsiteUtilities   String?
  ceProfessionalFees   String?
  ceTotal              String?
  photos               Photo[]
  project              Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, weekNumber, year])
  @@map("reports")
}

model Photo {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  caption      String?
  tags         String?  @db.Text  // Store as JSON array of strings like ["Kitchen", "Plumbing"]
  uploadedAt   DateTime @default(now())
  projectId    String
  reportId     String?
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  report       Report?  @relation(fields: [reportId], references: [id])

  @@map("photos")
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

model Document {
  id           String    @id @default(cuid())
  name         String    // Display name
  description  String?   // Optional description
  type         String    // 'file' or 'link'
  url          String    // File URL (Cloudinary) or hyperlink
  mimeType     String?   // For files: application/pdf, etc.
  size         Int?      // File size in bytes
  uploadedAt   DateTime  @default(now())
  
  projectId    String
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@map("documents")
}
